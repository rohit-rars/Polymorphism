ModelState is a property of a Controller object, and can be accessed from those classes that inherit from System.Web.Mvc.Controller.

The ModelState represents a collection of name and value pairs that were submitted to the server during a POST. It also contains a collection of error messages for each value submitted. Despite its name, it doesn't actually know anything about any model classes, it only has names, values, and errors.

The ModelState has two purposes: to store the value submitted to the server, and to store the validation errors associated with those values.

There's still two important properties that we haven't discussed, though: the ModelState.Errors property and the ModelState.IsValid property.

Notice the two helpers we are using now, ValidationSummary and ValidationMessageFor.

ValidationSummary: reads all errors from the model state and displays them in a bulleted list.
ValidationMessageFor: displays only errors for to the property specified.

We can actually add errors to the model state via the AddModelError() method on ModelStateDictionary:

ModelState.AddModelError("LastName", "Error Message for LastName);at

MVC Request Life Cycle:
Controller/Action/id: This URL is automatically mapped to Action Method inside the MVC Controller.  The job of Action Method is to create the Response and send it back to the client. 

{controller}/{action}/{id}

Request -> 
Routing (The UrlRoutingModule parses each request and makes the route selection. It loops through the RouteData from a RouteTable and selects the first route which matches the current URL.)


Routing is the process of directing an HTTP request to a controller. When the MVC application launches the Application_Start() event handler of the global.asax execute that call the RegisterRoutes() method from RouteConfig class under App_Start directory (App_Start/RouteConfig.cs). The RegisterRoutes() route has a parameter that is a collection of routes called the RouteCollection that contains all the registered routes in the application.

Properties of Route:
Route Name: A route is a URL pattern that is mapped to a handler. A handler can be a controller in the MVC application that processes the request. A route name may be used as a specific reference to a given route.
URL Pattern: A URL pattern can contain literal values and variable placeholders (referred to as URL parameters). The literals and placeholders are located in segments of the URL that are delimited by the slash (/) character.
Defaults: When you define a route, you can assign a default value for a parameter. The defaults is an object that contains default route values.
Constraints: A set of constraints to apply against the URL pattern to more narrowly define the URL that it matches.

 ->
Controller Initialization (MVC Handler in the ASP.NET MVC application is to create the Controller Instance which is going to process the current request.) ->
Action Execution (A component called the action invoker finds and selects an appropriate Action method to invoke the controller.) ->
Result Execution
	If View Result Yes - > Call ExecuteResults (Select View Engine) - > Call Render View -> Result Filters Applied -> Response - > to the browser
	If View Result No -> Result Filters Applied -> to the browser


Result Types In MVC:

ActionResult:
An ActionResult is a return type of a controller method, also called an action method, and serves as the base class for *Result classes. Action methods return models to views, file streams, redirect to other controllers, or whatever is necessary for the task at hand. The controller takes on this responsibility to connect system components, acting as a traffic cop. ActionResult is abstract class.

Content Result:
Content result returns different content's format to view. MVC returns different format using content return like HTML format, Java Script format and any other format.

public ActionResult Contact()  
{  
	ViewBag.Message = "Your contact page.";
    return View();  
}  

ViewResult:
Renders a specified view to the response stream. View result is a basic view result. It returns basic results to view page. View result can return data to view page through which class is defined in the model. View page is a simple HTML page.

View Result is a class and is derived from “ViewResultBase” class. “ViewResultBase” is derived from Action Result. View Result base class is an Action Result. Action Result is a base class of different action result.

Partial View Result:
Partial View Result is returning the result to Partial view page. Partial view is one of the views that we can call inside Normal view page. We should create a Partial view inside shared folder, otherwise we cannot access the Partial view. Partial View Result class is also derived from Action Result.

public PartialViewResult Index()  
{  
	return PartialView("_PartialView");  
}  

Redirect Result:
Redirect result is returning the result to specific URL. It is rendered to the page by URL. If it gives wrong URL, it will show 404 page errors.

public RedirectResult Index()  
{  
	return Redirect("Home/Contact");  
} 

Redirect to Action Result:
Redirect to Action result is returning the result to a specified controller and action method. Controller name is optional in Redirect to Action method. If not mentioned, Controller name redirects to a mentioned action method in current Controller. Suppose action name is not available but mentioned in the current controller, then it will show 404 page error.

You can use RedirectToAction("Index", "Home", new { id = 5 }) which will generate the URL for you based on your route table.

You can use Redirect but must construct the URL yourself, so you pass Redirect("/Home/Index/5") or however your route table works.

You can't redirect to google.com (an external URL) using RedirectToAction, you must use Redirect.



public ActionResult Index()  
{  
	return RedirectToAction("LoginAction", "AccountController");  
}

Json Result:
Json result is a significant Action Result in MVC. It will return simple text file format and key value pairs. If we call action method, using Ajax, it should return Json result.

While returning more data in Json format, there is a need to mention maximum length. Assign maximum length of data Using “MaxJsonLength” property.

public ActionResult Index()  
{  
	var persons = new List<Person1>  
	{  
		new Person1{Id=1, FirstName="Harry", LastName="Potter"},  
		new Person1{Id=2, FirstName="James", LastName="Raj"}  
	};  
    return Json(persons, JsonRequestBehavior.AllowGet);  
  }  

File Result
File Result returns different file format view page when we implement file download concept in MVC using file result. Simple examples for file result are shown below:

public ActionResult Index()  
{  
	return File("Web.Config", "text");  
}  

MVC FILTERS
ASP.NET MVC Filter is a custom class where you can write custom logic to execute before or after an action method executes. Filters can be applied to an action method or controller in a declarative or programmatic way. Declarative means by applying a filter attribute to an action method or controller class and programmatic means by implementing a corresponding interface.

You can apply filters at a global level in the Application_Start event of the global.asax.cs file by using default FilterConfig.RegisterGlobalFilters() method. The global filters will be applied to all the controller and action methods of an application.

Authentication filters (New in ASP.NET MVC5) - Not to mention in interview until not asked.
Authorization filters
Action filters
Result filters
Exception filters

Authentication Filters

This filter is introduced with ASP.NET MVC5. The IAuthenticationFilter interface is used to create CustomAuthentication filter. The definition of this interface is given below:

public interface IAuthenticationFilter
{
 void OnAuthentication(AuthenticationContext filterContext);

 void OnAuthenticationChallenge(AuthenticationChallengeContext filterContext);
}

You can create your CustomAuthentication filter attribute by implementing IAuthenticationFilter.

Authorization Filters
Performs authentication and authorizes before executing an action method. The ASP.NET MVC Authorize filter attribute implements the IAuthorizationFilter interface. The definition of this interface is given below-

public interface IAuthorizationFilter
{
 void OnAuthorization(AuthorizationContext filterContext);
}

The AuthorizeAttribute class provides the following methods to override in the CustomAuthorize attribute class.

public class AuthorizeAttribute : FilterAttribute, IAuthorizationFilter
{
 protected virtual bool AuthorizeCore(HttpContextBase httpContext);
 protected virtual void HandleUnauthorizedRequest(AuthorizationContext filterContext);
 public virtual void OnAuthorization(AuthorizationContext filterContext);
 protected virtual HttpValidationStatus OnCacheAuthorization(HttpContextBase httpContext);
}

Action Filters
Action filters are executed before or after an action is executed. The IActionFilter interface is used to create an Action Filter which provides two methods OnActionExecuting and OnActionExecuted which will be executed before or after an action is executed respectively.

public interface IActionFilter
{
 void OnActionExecuting(ActionExecutingContext filterContext);
 void OnActionExecuted(ActionExecutedContext filterContext);
}


Result Filters:

Result filters are executed before or after generating the result for an action. The Action Result type can be ViewResult, PartialViewResult, RedirectToRouteResult, RedirectResult, ContentResult, JsonResult, FileResult and EmptyResult which derives from the ActionResult class. Result filters are called after the Action filters. The IResultFilter interface is used to create an Result Filter which provides two methods OnResultExecuting and OnResultExecuted which will be executed before or after generating the result for an action respectively.

public interface IResultFilter
{
 void OnResultExecuted(ResultExecutedContext filterContext);
 void OnResultExecuting(ResultExecutingContext filterContext);
}

Exception Filters

Exception filters are executed when exception occurs during the actions execution or filters execution. The IExceptionFilter interface is used to create an Exception Filter which provides OnException method which will be executed when exception occurs during the actions execution or filters execution.

public interface IExceptionFilter
{
 void OnException(ExceptionContext filterContext);
}

ASP.NET MVC HandleErrorAttribute filter is an Exception filter which implements IExceptionFilter. When HandleErrorAttribute filter receives the exception it returns an Error view located in the Views/Shared folder of your ASP.NET MVC application.

Order of Filter Execution
All ASP.NET MVC filter are executed in an order. The correct order of execution is given below:
Authentication filters
Authorization filters
Action filters
Result filters

You can configure your own custom filter into your application at following three levels:
Global level
By registering your filter into Application_Start event of Global.asax.cs file with the help of FilterConfig class.

protected void Application_Start()
{
 FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters);
}


Controller level
By putting your filter on the top of the controller name as shown below-

[Authorize(Roles="Admin")]
public class AdminController : Controller
{
 //
}

Action level
By putting your filter on the top of the action name as shown below-

public class UserController : Controller
{
 [Authorize(Users="User1,User2")]
 public ActionResult LinkLogin(string provider)
 {
 // TODO:
 return View();
 }
}

ViewBag
ViewBag is a dynamic object to pass the data from Controller to View. And, this will pass the data as a property of object ViewBag. And we have no need to typecast to read the data or for null checking. The scope of ViewBag is permitted to the current request and the value of ViewBag will become null while redirecting.

List<string> Student = new List<string>();  
      Student.Add("Jignesh");  
      Student.Add("Tejas");  
      Student.Add("Rakesh");  
   
      ViewBag.Student = Student;  
	  
ViewData
ViewData is a dictionary object to pass the data from Controller to View where data is passed in the form of key-value pair. And typecasting is required to read the data in View if the data is complex and we need to ensure null check to avoid null exceptions. The scope of ViewData is similar to ViewBag and it is restricted to the current request and the value of ViewData will become null while redirecting.

List<string> Student = new List<string>();  
      Student.Add("Jignesh");  
      Student.Add("Tejas");  
      Student.Add("Rakesh");  
   
      ViewData["Student"] = Student; 


TempData
TempData is a dictionary object to pass the data from one action to other action in the same Controller or different Controllers. Usually, TempData object will be stored in a session object. Tempdata is also required to typecast and for null checking before reading data from it. TempData scope is limited to the next request and if we want Tempdata to be available even further, we should use Keep and peek.
TempData is used to pass data between two consecutive requests.TempData only works during the current and subsequent request

ViewData and ViewBag are used for the same purpose --  to transfer data from controller to view.  ViewData is nothing but a dictionary of objects and it is accessible by string as key. ViewData is a property of controller that exposes an instance of the ViewDataDictionary class. ViewBag is very similar to ViewData. ViewBag is a dynamic property (dynamic keyword which is introduced in .net framework 4.0). ViewBag is able to set and get value dynamically and able to add any number of additional fields without converting it to strongly typed. ViewBag is just a wrapper around the ViewData.

Data Annotations:

Data Annotations are nothing but certain validations that we put in our models to validate the input from the user. ASP.NET MVC provides a unique feature in which we can validate the models using the Data Annotation attribute. Import the following namespace to use data annotations in the application.

System.ComponentModel.DataAnnotations

It is very easy to use and the code becomes much cleaner as compared to normal ASP.NET validators.

Required
This attribute specifies that the value is mandatory and cannot be skipped.

DataType
This attribute is used to specify the datatype of the model.

Range
Using this attribute we can set a range between two numbers.

Syntax
[Range(100,500,ErrorMessage="Please enter correct value")]

StringLength
Using this attribute we can specify maximum and minimum length of the property.

Syntax
[StringLength(30,ErrorMessage="Do not enter more than 30 characters")]

DisplayName

Using this attribute we can specify property name to be displayed on view.

Syntax

[Display(Name="Student Name")]

MaxLength
Using this attribute we can specify maximum length of property.

Syntax
[MaxLength(3)]

RegularExpression
We can set a regex pattern for the property. For ex: Email ID.

Syntax
[RegularExpression(@"^\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$", ErrorMessage = "Email is not valid.")]







































